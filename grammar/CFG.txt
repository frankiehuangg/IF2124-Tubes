# Line
S -> S S | LINE_ASSIGN NEWLINE | LINE_OTHERS
LINE_ASSIGN -> LET | CONST | ASSIGN | VALUE | OBJECT | ARRAY | TERNARY | OBJECT_FUNC_CALL_LINE | FUNC_CALL_LINE
LINE_OTHERS -> CONDITIONAL | SWITCH | FOR | WHILE | FUNCTION | CATCHBLOCK | DOWHILE


# Newline ";" or ";\n"
NEWLINE -> SEMICOLON


# Operator
ARITHMETIC -> PLUS | MINUS | MULT | POWER | DIVIDE | MODULO
INCDEC -> INCREMENT | DECREMENT

ASSIGNMENT -> EQUAL | PLUSEQUAL | MINEQUAL | MULTEQUAL | DIVEQUAL | MODEQUAL | POWEQUAL | SHIFTLEFTEQUAL | SHIFTARITHRIGHTEQUAL | SHIFTLOGICRIGHTEQUAL | ANDEQUAL | XOREQUAL | OREQUAL | LOGICANDEQUAL | LOGICOREQUAL

COMPARISON -> COMPARE | STRICTCOMPARE | NOTCOMPARE | STRICTNOTCOMPARE | BIGGERTHAN | SMALLERTHAN | BIGGEREQUALTHAN | SMALLEREQUALTHAN

LOGICAL -> LOGICAND | LOGICOR

BITWISE -> AND | OR | XOR | SHIFTLEFT | SHIFTARITHRIGHT | SHIFTLOGICRIGHT



# Primitive Data Types
INTEGER -> NUMBER | NUMBER DOT NUMBER

BOOLEAN -> OPENP BOOLEAN CLOSEP | BOOLEAN LOGICAL BOOLEAN | LOGICNOT BOOLEAN | VALUE COMPARISON VALUE | TRUE | FALSE

VALUE -> OPENP VALUE CLOSEP | INTEGER | STRING | BOOLEAN | TEXT | NULL | VALUE COMPARISON VALUE | VALUE ARITHMETIC VALUE | VALUE INCDEC | VALUE BITWISE VALUE | NOT VALUE | UNDEFINED | TEXT ARRAY_ACCESS | TEXT DOT TEXT | NEW TEXT OPENP CLOSEP | TERNARY



# Statements 
SECOND_STAT -> SECOND_STAT COMMA SECOND_STAT | TEXT ASSIGNMENT VALUE
LET -> ASSIGN_LET SECOND_STAT | ASSIGN_VAR SECOND_STAT
CONST -> ASSIGN_CONST SECOND_STAT
ASSIGN -> VALUE ASSIGNMENT VALUE



# Open / Close brackets
OPENB -> OPENBRAC
CLOSEB -> CLOSEBRAC
OPENP -> OPENPAR
CLOSEP -> CLOSEPAR



# Object 
OBJECT_PROP -> OBJECT_PROP COMMA OBJECT_PROP | TEXT COLON VALUE | TEXT COLON FUNCTION | TEXT
OBJECT -> ASSIGN_CONST TEXT EQUAL OPENB OBJECT_PROP CLOSEB | ASSIGN_CONST TEXT EQUAL NEW TEXT OPENP OBJECT_PROP CLOSEP
OBJECT_EXP -> OBJECT_EXP OBJECT_EXP | DELETE TEXT DOT TEXT

OBJECT_FUNC_CALL_LINE -> OBJECT_FUNC_CALL | OBJECT_FUNC_CALL NEWLINE

OBJECT_PARAM -> OBJECT_PARAM COMMA OBJECT_PARAM | VALUE

OBJECT_FUNC_CALL -> TEXT DOT TEXT OPENP CLOSEP | TEXT DOT TEXT OPENP OBJECT_PARAM CLOSEP | TEXT DOT TEXT OPENP FUNC_CALL CLOSEP | TEXT DOT TEXT OPENP OBJECT_FUNC_CALL CLOSEP


# Array 
ARRAY_PROP -> ARRAY_PROP COMMA ARRAY_PROP | VALUE
ARRAY -> ASSIGN_CONST TEXT EQUAL ARRAY_OPEN ARRAY_PROP ARRAY_CLOSE | ASSIGN_CONST TEXT EQUAL ARRAY_OPEN ARRAY_CLOSE | ASSIGN_CONST TEXT EQUAL NEW TEXT OPENP ARRAY_PROP CLOSEP
ARRAY_ACCESS -> ARRAY_ACCESS ARRAY_ACCESS | ARRAY_OPEN INTEGER ARRAY_CLOSE | ARRAY_OPEN STRING ARRAY_CLOSE


# Conditional 
LINE_COND -> LET | CONST | ASSIGN | VALUE | ARRAY | TERNARY | OBJECT_FUNC_CALL_LINE | FUNC_CALL_LINE | CONDITIONAL | FOR | WHILE | DOWHILE

IF -> COND_IF OPENP BOOLEAN CLOSEP OPENB S CLOSEB | COND_IF OPENP BOOLEAN CLOSEP LINE_COND NEWLINE | COND_IF OPENP BOOLEAN CLOSEP LINE_COND NEWLINE
ELIF -> ELIF ELIF | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP OPENB S CLOSEB | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP LINE_COND NEWLINE | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP LINE_COND NEWLINE
ELSE -> COND_ELSE OPENB S CLOSEB | COND_ELSE LINE_COND NEWLINE | COND_ELSE LINE_COND NEWLINE

CONDITIONAL -> IF | IF ELSE | IF ELIF ELSE


# Ternary
SECOND_TERN -> TERNARY | VALUE
TERNARY -> BOOLEAN QUESTION VALUE COLON SECOND_TERN


# Switch 
BREAK -> SWITCH_BREAK NEWLINE
CASE -> CASE CASE | SWITCH_CASE VALUE COLON S BREAK | SWITCH_CASE VALUE COLON S | SWITCH_CASE VALUE COLON BREAK
DEFAULT -> SWITCH_DEFAULT COLON S BREAK | SWITCH_DEFAULT COLON S

SWITCH_PROP -> CASE DEFAULT | CASE

SWITCH -> SWITCH_SWITCH OPENP VALUE CLOSEP OPENB SWITCH_PROP CLOSEB



# Loops 
LOOP_PROP -> LOOP_PROP LOOP_PROP | S | SWITCH_BREAK NEWLINE | CONTINUE NEWLINE

EXP_ONE -> EXP_ONE COMMA EXP_ONE | LET | ASSIGN
EXP_THR -> EXP_THR COMMA EXP_THR | TEXT INCDEC
EXPRESSION -> EXP_ONE SEMICOLON BOOLEAN SEMICOLON EXP_THR | SEMICOLON BOOLEAN SEMICOLON EXP_THR | EXP_ONE SEMICOLON SEMICOLON EXP_THR | EXP_ONE SEMICOLON BOOLEAN SEMICOLON | SEMICOLON SEMICOLON EXP_THR | SEMICOLON BOOLEAN SEMICOLON | EXP_ONE SEMICOLON SEMICOLON | SEMICOLON SEMICOLON SEMICOLON

FOR -> LOOP_FOR OPENP EXPRESSION CLOSEP OPENB LOOP_PROP CLOSEB | LOOP_FOR OPENP EXPRESSION CLOSEP LOOP_PROP | LOOP_FOR OPENP ASSIGN_LET TEXT LOOP_IN TEXT CLOSEP OPENB LOOP_PROP CLOSEB | LOOP_FOR OPENP TEXT LOOP_IN TEXT CLOSEP OPENB LOOP_PROP CLOSEB | LOOP_FOR OPENP ASSIGN_LET TEXT LOOP_IN TEXT CLOSEP S | LOOP_FOR OPENP TEXT LOOP_IN TEXT CLOSEP LOOP_PROP


WHILE -> LOOP_WHILE OPENP BOOLEAN CLOSEP OPENB LOOP_PROP CLOSEB | LOOP_WHILE OPENP BOOLEAN CLOSEP LOOP_PROP

DOWHILE -> LOOP_DO OPENB LOOP_PROP CLOSEB LOOP_WHILE OPENP BOOLEAN CLOSEP NEWLINE




# Try Catch Finally
CATCH_PROP -> CATCH_PROP CATCH_PROP | S | CATCH_THROW STRING NEWLINE
TRY -> CATCH_TRY OPENB CATCH_PROP CLOSEB
CATCH -> CATCH_CATCH OPENP TEXT CLOSEP OPENB CATCH_PROP CLOSEB
FINALLY -> CATCH_FINALLY OPENB CATCH_PROP CLOSEB

CATCHBLOCK -> TRY CATCH FINALLY | TRY CATCH | TRY FINALLY




# Functions 
PARAMETER -> PARAMETER COMMA PARAMETER | TEXT
FUNC_CONTENT -> S | FUNC_COND | FUNC_LOOP | FUNC_SWITCH | FUNC_RETURN VALUE NEWLINE

FUNC_PROP -> FUNC_PROP FUNC_PROP | FUNC_CONTENT


# FUNCTION CONDITIONALS
FUNC_IF -> COND_IF OPENP BOOLEAN CLOSEP OPENB FUNC_PROP CLOSEB | COND_IF OPENP BOOLEAN CLOSEP FUNC_CONTENT
FUNC_ELIF -> FUNC_ELIF FUNC_ELIF | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP OPENB FUNC_PROP CLOSEB | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP FUNC_CONTENT
FUNC_ELSE -> COND_ELSE OPENB FUNC_PROP CLOSEB | COND_ELSE FUNC_CONTENT

FUNC_COND -> FUNC_IF | FUNC_IF FUNC_ELSE | FUNC_IF FUNC_ELIF FUNC_ELSE


# FUNCTION LOOPS
FUNC_LOOP_PROP -> FUNC_LOOP_PROP FUNC_LOOP_PROP | SWITCH_BREAK NEWLINE | CONTINUE NEWLINE | FUNC_PROP

FUNC_FOR -> LOOP_FOR OPENP EXPRESSION CLOSEP OPENB FUNC_LOOP_PROP CLOSEB | LOOP_FOR OPENP EXPRESSION CLOSEP FUNC_LOOP_PROP | LOOP_FOR OPENP ASSIGN_LET TEXT LOOP_IN TEXT CLOSEP OPENB FUNC_LOOP_PROP CLOSEB | LOOP_FOR OPENP TEXT LOOP_IN TEXT CLOSEP OPENB FUNC_LOOP_PROP CLOSEB | LOOP_FOR OPENP ASSIGN_LET TEXT LOOP_IN TEXT CLOSEP S | LOOP_FOR OPENP TEXT LOOP_IN TEXT CLOSEP FUNC_LOOP_PROP

FUNC_WHILE -> LOOP_WHILE OPENP BOOLEAN CLOSEP OPENB FUNC_LOOP_PROP CLOSEB | LOOP_WHILE OPENP BOOLEAN CLOSEP FUNC_LOOP_PROP

FUNC_DOWHILE -> LOOP_DO OPENB FUNC_LOOP_PROP CLOSEB LOOP_WHILE OPENP BOOLEAN CLOSEP NEWLINE

FUNC_LOOP -> FUNC_FOR | FUNC_WHILE | FUNC_DOWHILE


# FUNCTION_SWITCH
FUNC_SWITCH_PROP -> FUNC_CASE FUNC_DEFAULT | FUNC_CASE | FUNC_SWITCH_PROP FUNC_SWITCH_PROP | CONTINUE NEWLINE | FUNC_PROP

FUNC_BREAK -> SWITCH_BREAK NEWLINE
FUNC_CASE -> FUNC_CASE FUNC_CASE | SWITCH_CASE VALUE COLON FUNC_SWITCH_PROP BREAK | SWITCH_CASE VALUE COLON FUNC_SWITCH_PROP | SWITCH_CASE VALUE COLON BREAK
FUNC_DEFAULT -> SWITCH_DEFAULT COLON FUNC_SWITCH_PROP BREAK | SWITCH_DEFAULT COLON FUNC_SWITCH_PROP

FUNC_SWITCH -> SWITCH_SWITCH OPENP VALUE CLOSEP OPENB FUNC_SWITCH_PROP CLOSEB



# FUNCTION INIT
FUNCTION -> FUNCTION_EMPTY | FUNCTION_PARAM

FUNCTION_EMPTY -> FUNC_FUNCTION TEXT OPENP CLOSEP OPENB FUNC_PROP CLOSEB | ASSIGN_CONST TEXT EQUAL FUNC_FUNCTION OPENP CLOSEP OPENB FUNC_PROP CLOSEB

FUNCTION_PARAM -> FUNC_FUNCTION TEXT OPENP PARAMETER CLOSEP OPENB FUNC_PROP CLOSEB | ASSIGN_CONST TEXT EQUAL FUNC_FUNCTION OPENP PARAMETER CLOSEP OPENB FUNC_PROP CLOSEB | OPENP PARAMETER CLOSEP FUNC_LINE OPENB FUNC_PROP CLOSEB | OPENP PARAMETER CLOSEP FUNC_LINE FUNC_PROP | TEXT FUNC_LINE FUNC_PROP

FUNC_CALL_LINE -> FUNC_CALL NEWLINE

FUNC_CALL -> TEXT OPENP CLOSEP | TEXT OPENP VALUE CLOSEP


# TERMINAL
PLUS -> plus
MINUS -> minus
MULT -> mult
POWER -> power
DIVIDE ->  divide
MODULO -> modulo

INCREMENT -> increment
DECREMENT -> decrement

EQUAL -> equal
PLUSEQUAL -> plusequal
MINEQUAL -> minequal
MULTEQUAL -> multequal
DIVEQUAL -> divequal
MODEQUAL -> modequal
POWEQUAL -> powequal
SHIFTLEFTEQUAL -> shiftleftequal
SHIFTARITHRIGHTEQUAL -> shiftarithrightequal
SHIFTLOGICRIGHTEQUAL -> shiftlogicrightequal
ANDEQUAL -> andequal
XOREQUAL -> xorequal
OREQUAL -> orequal
LOGICANDEQUAL -> logicandequal
LOGICOREQUAL -> logicorequal

COMPARE -> compare
STRICTCOMPARE -> strictcompare
NOTCOMPARE -> notcompare
STRICTNOTCOMPARE -> strictnotcompare
BIGGERTHAN -> biggerthan
SMALLERTHAN -> smallerthan
BIGGEREQUALTHAN -> biggerequalthan
SMALLEREQUALTHAN -> smallerequalthan

LOGICAND -> logicand
LOGICOR -> logicor
LOGICNOT -> logicnot

AND -> and
OR -> or
XOR -> xor
NOT -> not
SHIFTLEFT -> shiftleft
SHIFTARITHRIGHT -> shiftarithright
SHIFTLOGICRIGHT -> shiftlogicright

NUMBER -> number
STRING -> string
TEXT -> variable

TRUE -> true
FALSE -> false

NULL -> null
UNDEFINED -> undefined

APOSTHROPE -> aposthrope
QUOTE -> quote

COMMENT -> comment

ASSIGN_LET -> let
ASSIGN_VAR -> var
ASSIGN_CONST -> const

COMMA -> comma
DOT -> dot
COLON -> colon
SEMICOLON -> semicolon
OPENPAR -> openpar
CLOSEPAR -> closepar
OPENBRAC -> openbrac
CLOSEBRAC -> closebrac
QUESTION -> question
ENDLINE -> endline
NEW -> new
DELETE -> delete
BREAK -> break
CONTINUE -> continue

ARRAY_OPEN -> arrayopen
ARRAY_CLOSE -> arrayclose

COND_IF -> if
COND_ELSE -> else

SWITCH_BREAK -> break
SWITCH_SWITCH -> switch
SWITCH_CASE -> case
SWITCH_DEFAULT -> default

LOOP_FOR -> for
LOOP_WHILE -> while
LOOP_IN -> in
LOOP_DO -> do

FUNC_FUNCTION -> function
FUNC_RETURN -> return
FUNC_LINE -> funcline

CATCH_THROW -> throw
CATCH_TRY -> try
CATCH_CATCH -> catch
CATCH_FINALLY -> finally