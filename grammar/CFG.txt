# Line
S -> S S | LINE
LINE -> LET | CONST | VALUE | OBJECT | ARRAY | OBJECT | OBJECT_FUNC_CALL_LINE | ARRAY | CONDITIONAL | SWITCH | LOOP | FUNCTION | FUNC_CALL_LINE | CATCHBLOCK | NEWLINE
NEWLINE -> ENDLINE | SEMICOLON | SEMICOLON ENDLINE


# Operator
ARITHMETIC -> PLUS | MINUS | MULT | POWER | DIVIDE | MODULO
INCDEC -> INCREMENT | DECREMENT

ASSIGNMENT -> EQUAL | PLUSEQUAL | MINEQUAL | MULTEQUAL | DIVEQUAL | MODEQUAL | POWEQUAL | SHIFTLEFTEQUAL | SHIFTARITHRIGHTEQUAL | SHIFTLOGICRIGHTEQUAL | ANDEQUAL | XOREQUAL | OREQUAL | LOGICANDEQUAL | LOGICOREQUAL

COMPARISON -> COMPARE | STRICTCOMPARE | NOTCOMPARE | STRICTNOTCOMPARE | BIGGERTHAN | SMALLERTHAN | BIGGEREQUALTHAN | SMALLEREQUALTHAN

LOGICAL -> LOGICAND | LOGICOR

BITWISE -> AND | OR | XOR | SHIFTLEFT | SHIFTARITHRIGHT | SHIFTLOGICRIGHT



# Primitive Data Types
INTEGER -> NUMBER | NUMBER DOT NUMBER

BOOLEAN -> OPENPAR BOOLEAN CLOSEPAR | BOOLEAN LOGICAL BOOLEAN | LOGICNOT BOOLEAN | VALUE COMPARISON VALUE | TRUE | FALSE

VALUE -> OPENPAR VALUE CLOSEPAR | INTEGER | STRING | BOOLEAN | TEXT | NULL | VALUE COMPARISON VALUE | VALUE ARITHMETIC VALUE | VALUE INCDEC | VALUE BITWISE VALUE | NOT VALUE | NULL | UNDEFINED



# Statements 
LET -> ASSIGN_LET TEXT ASSIGNMENT VALUE | ASSIGN_VAR TEXT ASSIGNMENT VALUE
CONST -> ASSIGN_CONST TEXT ASSIGNMENT VALUE



# Open / Close brackets
OPEN -> OPENBRAC | ENDLINE OPENBRAC | OPENBRAC ENDLINE | ENDLINE OPENBRAC ENDLINE
CLOSE -> CLOSEBRAC | ENDLINE CLOSEBRAC




# Object 
OBJECT_PROP -> OBJECT_PROP COMMA OBJECT_PROP | TEXT COLON VALUE | TEXT COLON FUNCTION | TEXT
OBJECT -> ASSIGN_CONST TEXT EQUAL OPEN OBJECT_PROP CLOSE
OBJECT_EXP -> OBJECT_EXP ENDLINE OBJECT_EXP | DELETE TEXT DOT TEXT ENDLINE

OBJECT_FUNC_CALL_LINE -> OBJECT_FUNC_CALL | OBJECT_FUNC_CALL NEWLINE

OBJECT_FUNC_CALL -> TEXT DOT TEXT OPENPAR CLOSEPAR | TEXT DOT TEXT OPENPAR VALUE CLOSEPAR | TEXT DOT TEXT OPENPAR FUNC_CALL CLOSEPAR | TEXT DOT TEXT OPENPAR OBJECT_FUNC_CALL CLOSEPAR



# Array 
ARRAY_PROP -> ARRAY_PROP COMMA ARRAY_PROP | VALUE
ARRAY -> ASSIGN_CONST TEXT EQUAL ARRAY_OPEN ARRAY_PROP ARRAY_CLOSE



# Conditional 
IF -> COND_IF OPENPAR BOOLEAN CLOSEPAR OPEN S CLOSE | COND_IF OPENPAR BOOLEAN CLOSEPAR ENDLINE LINE ENDLINE | COND_IF OPENPAR BOOLEAN CLOSEPAR LINE ENDLINE
ELIF -> ELIF ELIF | COND_ELSE COND_IF OPENPAR BOOLEAN CLOSEPAR OPEN S CLOSE | COND_ELSE COND_IF OPENPAR BOOLEAN CLOSEPAR ENDLINE LINE ENDLINE | COND_ELSE COND_IF OPENPAR BOOLEAN CLOSEPAR LINE ENDLINE
ELSE -> COND_ELSE OPEN S CLOSE | COND_ELSE ENDLINE LINE ENDLINE | COND_ELSE LINE ENDLINE

CONDITIONAL -> IF | IF ENDLINE ELSE | IF ENDLINE ELIF ENDLINE ELSE


# Switch 
BREAK -> SWITCH_BREAK ENDLINE
CASE -> CASE CASE | SWITCH_CASE TEXT COLON S BREAK | SWITCH_CASE TEXT COLON S
DEFAULT -> SWITCH_DEFAULT COLON S BREAK | SWITCH_DEFAULT COLON S
SWITCH -> SWITCH_SWITCH OPENPAR TEXT CLOSEPAR OPEN CASE DEFAULT CLOSE | SWITCH_SWITCH OPENPAR TEXT CLOSEPAR OPEN CASE CLOSE



# Loops 
LOOP_PROP -> LOOP_PROP LOOP_PROP | S | BREAK NEWLINE | CONTINUE NEWLINE

EXP_ONE -> EXP_ONE COMMA EXP_ONE | LET
EXP_THR -> EXP_THR COMMA EXP_THR | TEXT INCDEC
EXPRESSION -> EXP_ONE SEMICOLON BOOLEAN SEMICOLON EXP_THR | SEMICOLON BOOLEAN SEMICOLON EXP_THR | EXP_ONE SEMICOLON SEMICOLON EXP_THR | EXP_ONE SEMICOLON BOOLEAN SEMICOLON | SEMICOLON SEMICOLON EXP_THR | SEMICOLON BOOLEAN SEMICOLON | EXP_ONE SEMICOLON SEMICOLON | SEMICOLON SEMICOLON SEMICOLON

FOR -> LOOP_FOR OPENPAR EXPRESSION CLOSEPAR OPEN LOOP_PROP CLOSE | LOOP_FOR OPENPAR ASSIGN_LET TEXT LOOP_IN TEXT CLOSEPAR OPEN LOOP_PROP CLOSE | LOOP_FOR OPENPAR ASSIGN_LET TEXT of TEXT CLOSEPAR OPEN LOOP_PROP CLOSE


WHILE -> LOOP_WHILE OPENPAR BOOLEAN CLOSEPAR OPEN LOOP_PROP CLOSE
DOWHILE -> LOOP_DO OPEN LOOP_PROP CLOSEBRAC LOOP_WHILE OPENPAR BOOLEAN CLOSE NEWLINE

LOOP -> FOR | WHILE | DOWHILE


# Functions 
PARAMETER -> PARAMETER COMMA PARAMETER | TEXT
FUNC_CONTENT -> S | FUNC_COND | FUNC_LOOP | FUNC_RETURN VALUE NEWLINE | FUNC_RETURN VALUE

FUNC_PROP -> FUNC_PROP FUNC_PROP | FUNC_CONTENT

FUNC_IF -> COND_IF OPENPAR BOOLEAN CLOSEPAR OPEN FUNC_PROP CLOSE | COND_IF OPENPAR BOOLEAN CLOSEPAR ENDLINE FUNC_PROP NEWLINE | COND_IF OPENPAR BOOLEAN CLOSEPAR FUNC_PROP NEWLINE
FUNC_ELIF -> ELIF ELIF | COND_ELSE COND_IF OPENPAR BOOLEAN CLOSEPAR OPEN FUNC_PROP CLOSE | COND_ELSE COND_IF OPENPAR BOOLEAN CLOSEPAR ENDLINE FUNC_PROP NEWLINE | COND_ELSE COND_IF OPENPAR BOOLEAN CLOSEPAR FUNC_PROP NEWLINE
FUNC_ELSE -> COND_ELSE OPEN FUNC_PROP CLOSE | COND_ELSE ENDLIE FUNC_PROP ENDLINE | COND_ELSE FUNC_PROP ENDLINE

FUNC_COND -> FUNC_IF NEWLINE FUNC_ELSE | FUNC_IF FUNC_ELIF FUNC_ELSE | FUNC_IF


FUNC_LOOP_PROP -> BREAK NEWLINE | CONTINUE NEWLINE | FUNC_PROP
FUNC_FOR -> LOOP_FOR OPENPAR EXPRESSION CLOSEPAR OPEN FUNC_LOOP_PROP CLOSE | LOOP_FOR OPENPAR ASSIGN_LET TEXT LOOP_IN TEXT CLOSEPAR OPEN FUNC_LOOP_PROP CLOSE | LOOP_FOR OPENPAR ASSIGN_LET TEXT of TEXT CLOSEPAR OPEN FUNC_LOOP_PROP CLOSE

FUNC_WHILE -> LOOP_WHILE OPENPAR BOOLEAN CLOSEPAR OPEN FUNC_LOOP_PROP CLOSE
FUNC_DOWHILE -> LOOP_DO OPEN FUNC_LOOP_PROP CLOSEBRAC LOOP_WHILE OPENPAR BOOLEAN CLOSE ENDLINE

FUNC_LOOP -> FUNC_FOR | FUNC_WHILE | FUNC_DOWHILE


FUNCTION -> FUNC_FUNCTION TEXT OPENPAR PARAMETER CLOSEPAR OPEN FUNC_PROP CLOSE | ASSIGN_CONST TEXT EQUAL FUNC_FUNCTION OPENPAR PARAMETER CLOSEPAR OPEN FUNC_PROP CLOSE | OPENPAR PARAMETER CLOSEPAR FUNC_LINE OPEN FUNC_PROP CLOSE

FUNC_CALL_LINE -> FUNC_CALL | FUNC_CALL NEWLINE

FUNC_CALL -> TEXT OPENPAR CLOSEPAR | TEXT OPENPAR VALUE CLOSEPAR


# Try Catch Finally
CATCH_PROP -> CATCH_PROP CATCH_PROP | S | CATCH_THROW STRING ENDLINE
TRY -> CATCH_TRY OPEN CATCH_PROP CLOSE
CATCH -> CATCH_CATCH OPENPAR TEXT CLOSEPAR OPEN CATCH_PROP CLOSE
FINALLY -> CATCH_FINALLY OPEN CATCH_PROP CLOSE

CATCHBLOCK -> TRY CATCH FINALLY | TRY CATCH | TRY FINALLY



# TERMINAL
PLUS -> plus
MINUS -> minus
MULT -> mult
POWER -> power
DIVIDE ->  divide
MODULO -> modulo

INCREMENT -> increment
DECREMENT -> decrement

EQUAL -> equal
PLUSEQUAL -> plusequal
MINEQUAL -> minequal
MULTEQUAL -> multequal
DIVEQUAL -> divequal
MODEQUAL -> modequal
POWEQUAL -> powequal
SHIFTLEFTEQUAL -> shiftleftequal
SHIFTARITHRIGHTEQUAL -> shiftarithrightequal
SHIFTLOGICRIGHTEQUAL -> shiftlogicrightequal
ANDEQUAL -> andequal
XOREQUAL -> xorequal
OREQUAL -> orequal
LOGICANDEQUAL -> logicandequal
LOGICOREQUAL -> logicorequal

COMPARE -> compare
STRICTCOMPARE -> strictcompare
NOTCOMPARE -> notcompare
STRICTNOTCOMPARE -> strictnotcompare
BIGGERTHAN -> biggerthan
SMALLERTHAN -> smallerthan
BIGGEREQUALTHAN -> biggerequalthan
SMALLEREQUALTHAN -> smallerequalthan

LOGICAND -> logicand
LOGICOR -> logicor
LOGICNOT -> logicnot

AND -> and
OR -> or
XOR -> xor
NOT -> not
SHIFTLEFT -> shiftleft
SHIFTARITHRIGHT -> shiftarithright
SHIFTLOGICRIGHT -> shiftlogicright

NUMBER -> number
STRING -> string
TEXT -> variable

TRUE -> true
FALSE -> false

NULL -> null
UNDEFINED -> undefined

APOSTHROPE -> aposthrope
QUOTE -> quote

COMMENT -> comment

ASSIGN_LET -> let
ASSIGN_VAR -> var
ASSIGN_CONST -> const

COMMA -> comma
DOT -> dot
COLON -> colon
SEMICOLON -> semicolon
OPENPAR -> openpar
CLOSEPAR -> closepar
OPENBRAC -> openbrac
CLOSEBRAC -> closebrac
ENDLINE -> endline
DELETE -> delete
BREAK -> break
CONTINUE -> continue

ARRAY_OPEN -> arrayopen
ARRAY_CLOSE -> arrayclose

COND_IF -> if
COND_ELSE -> else

SWITCH_SWITCH -> switch 
SWITCH_CASE -> case
SWITCH_DEFAULT -> default

LOOP_FOR -> for
LOOP_WHILE -> while
LOOP_IN -> in

FUNC_FUNCTION -> function
FUNC_RETURN -> return
FUNC_LINE -> funcline

CATCH_THROW -> throw
CATCH_TRY -> try
CATCH_CATCH -> catch
CATCH_FINALLY -> finally