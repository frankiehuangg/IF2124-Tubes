# Line
S -> S S | LINE_ASSIGN NEWLINE | LINE_OTHERS | ENTER
LINE_ASSIGN -> LET | CONST | ASSIGN | VALUE | OBJECT | ARRAY | TERNARY | OBJECT_FUNC_CALL_LINE | FUNC_CALL_LINE
LINE_OTHERS -> CONDITIONAL | SWITCH | FOR | WHILE | FUNCTION | CATCHBLOCK | DOWHILE


# Newline ";" or ";\n"
NEWLINE -> SEMICOLON | SEMICOLON ENTER
ENTER -> ENTER ENTER | ENDLINE


# Operator
ARITHMETIC -> PLUS | MINUS | MULT | POWER | DIVIDE | MODULO
INCDEC -> INCREMENT | DECREMENT

ASSIGNMENT -> EQUAL | PLUSEQUAL | MINEQUAL | MULTEQUAL | DIVEQUAL | MODEQUAL | POWEQUAL | SHIFTLEFTEQUAL | SHIFTARITHRIGHTEQUAL | SHIFTLOGICRIGHTEQUAL | ANDEQUAL | XOREQUAL | OREQUAL | LOGICANDEQUAL | LOGICOREQUAL

COMPARISON -> COMPARE | STRICTCOMPARE | NOTCOMPARE | STRICTNOTCOMPARE | BIGGERTHAN | SMALLERTHAN | BIGGEREQUALTHAN | SMALLEREQUALTHAN

LOGICAL -> LOGICAND | LOGICOR

BITWISE -> AND | OR | XOR | SHIFTLEFT | SHIFTARITHRIGHT | SHIFTLOGICRIGHT



# Primitive Data Types
INTEGER -> NUMBER | NUMBER DOT NUMBER

BOOLEAN -> OPENP BOOLEAN CLOSEP | BOOLEAN LOGICAL BOOLEAN | LOGICNOT BOOLEAN | VALUE COMPARISON VALUE | TRUE | FALSE

VALUE -> OPENP VALUE CLOSEP | INTEGER | STRING | BOOLEAN | TEXT | NULL | VALUE COMPARISON VALUE | VALUE ARITHMETIC VALUE | VALUE INCDEC | VALUE BITWISE VALUE | NOT VALUE | UNDEFINED | TEXT ARRAY_ACCESS | TEXT DOT TEXT | NEW TEXT OPENP CLOSEP | TERNARY



# Statements 
LET -> ASSIGN_LET TEXT ASSIGNMENT VALUE | ASSIGN_VAR TEXT ASSIGNMENT VALUE
CONST -> ASSIGN_CONST TEXT ASSIGNMENT VALUE
ASSIGN -> VALUE ASSIGNMENT VALUE



# Open / Close brackets
OPENB -> OPENBRAC | ENTER OPENBRAC | OPENBRAC ENTER | ENTER OPENBRAC ENTER
CLOSEB -> CLOSEBRAC | ENTER CLOSEBRAC | CLOSEBRAC ENTER | ENTER CLOSEBRAC ENTER
OPENP -> OPENPAR | ENTER OPENPAR | OPENPAR ENTER | ENTER OPENPAR ENTER
CLOSEP -> CLOSEPAR | ENTER CLOSEPAR | CLOSEPAR ENTER | ENTER CLOSEPAR ENTER



# Object 
OBJECT_PROP -> OBJECT_PROP COMMA OBJECT_PROP | OBJECT_PROP COMMA ENTER OBJECT_PROP | TEXT COLON VALUE | TEXT COLON FUNCTION | TEXT
OBJECT -> ASSIGN_CONST TEXT EQUAL OPENB OBJECT_PROP CLOSEB
OBJECT_EXP -> OBJECT_EXP ENTER OBJECT_EXP | DELETE TEXT DOT TEXT ENTER

OBJECT_FUNC_CALL_LINE -> OBJECT_FUNC_CALL | OBJECT_FUNC_CALL NEWLINE

OBJECT_PARAM -> OBJECT_PARAM COMMA OBJECT_PARAM | VALUE

OBJECT_FUNC_CALL -> TEXT DOT TEXT OPENP CLOSEP | TEXT DOT TEXT OPENP OBJECT_PARAM CLOSEP | TEXT DOT TEXT OPENP FUNC_CALL CLOSEP | TEXT DOT TEXT OPENP OBJECT_FUNC_CALL CLOSEP


# Array 
ARRAY_PROP -> ARRAY_PROP COMMA ARRAY_PROP | VALUE
ARRAY -> ASSIGN_CONST TEXT EQUAL ARRAY_OPEN ARRAY_PROP ARRAY_CLOSE | ASSIGN_CONST TEXT EQUAL ARRAY_OPEN ARRAY_CLOSE | ASSIGN_CONST TEXT EQUAL NEW NEW_ARRAY OPENP ARRAY_PROP CLOSEP
ARRAY_ACCESS -> ARRAY_ACCESS ARRAY_ACCESS | ARRAY_OPEN INTEGER ARRAY_CLOSE | ARRAY_OPEN STRING ARRAY_CLOSE


# Conditional 
LINE_COND -> LET | CONST | ASSIGN | VALUE | ARRAY | TERNARY | OBJECT_FUNC_CALL_LINE | FUNC_CALL_LINE | CONDITIONAL | FOR | WHILE | DOWHILE

IF -> COND_IF OPENP BOOLEAN CLOSEP OPENB S CLOSEB | COND_IF OPENP BOOLEAN CLOSEP ENTER LINE_COND NEWLINE | COND_IF OPENP BOOLEAN CLOSEP LINE_COND NEWLINE
ELIF -> ELIF ENTER ELIF | ELIF ELIF | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP OPENB S CLOSEB | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP ENTER LINE_COND NEWLINE | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP LINE_COND NEWLINE
ELSE -> COND_ELSE OPENB S CLOSEB | COND_ELSE ENTER LINE_COND NEWLINE | COND_ELSE LINE_COND NEWLINE

CONDITIONAL -> IF | IF ELSE | IF ENTER ELSE | IF ELIF ELSE | IF ENTER ELIF ELSE | IF ELIF ENTER ELSE | IF ENTER ELIF ENTER ELSE


# Ternary
SECOND -> TERNARY_VALUE | VALUE
TERNARY -> BOOLEAN QUESTION VALUE COLON SECOND


# Switch 
BREAK -> SWITCH_BREAK NEWLINE
CASE -> CASE CASE | SWITCH_CASE INTEGER COLON
DEFAULT -> SWITCH_DEFAULT COLON S BREAK | SWITCH_DEFAULT COLON S

SWITCH_PROP -> CASE DEFAULT | CASE

SWITCH -> SWITCH_SWITCH OPENP VALUE CLOSEP OPENB SWITCH_PROP CLOSEB | SWITCH_SWITCH OPENP VALUE CLOSEP OPENB SWITCH_CASE INTEGER COLON CLOSEB



# Loops 
LOOP_PROP -> LOOP_PROP LOOP_PROP | S | SWITCH_BREAK NEWLINE | CONTINUE NEWLINE

EXP_ONE -> EXP_ONE COMMA EXP_ONE | LET | ASSIGN
EXP_THR -> EXP_THR COMMA EXP_THR | TEXT INCDEC
MULT_BOOLEAN -> MULT_BOOLEAN COMMA MULT_BOOLEAN | BOOLEAN
EXPRESSION -> EXP_ONE SEMICOLON MULT_BOOLEAN SEMICOLON EXP_THR | SEMICOLON BOOLEAN SEMICOLON EXP_THR | EXP_ONE SEMICOLON SEMICOLON EXP_THR | EXP_ONE SEMICOLON BOOLEAN SEMICOLON | SEMICOLON SEMICOLON EXP_THR | SEMICOLON BOOLEAN SEMICOLON | EXP_ONE SEMICOLON SEMICOLON | SEMICOLON SEMICOLON SEMICOLON

FOR -> LOOP_FOR OPENP EXPRESSION CLOSEP OPENB LOOP_PROP CLOSEB | LOOP_FOR OPENP ASSIGN_LET TEXT LOOP_IN TEXT CLOSEP OPENB LOOP_PROP CLOSEB | LOOP_FOR OPENP ASSIGN_LET TEXT of TEXT CLOSEP OPENB LOOP_PROP CLOSE


WHILE -> LOOP_WHILE OPENP BOOLEAN CLOSEP OPENB LOOP_PROP CLOSEB

DOWHILE -> LOOP_DO OPENB LOOP_PROP CLOSEB LOOP_WHILE OPENP BOOLEAN CLOSEP NEWLINE


# Functions 
PARAMETER -> PARAMETER COMMA PARAMETER | TEXT
FUNC_CONTENT -> LINE_ASSIGN | FUNC_COND | FUNC_LOOP | FUNC_RETURN VALUE NEWLINE | FUNC_RETURN VALUE

FUNC_PROP -> FUNC_PROP FUNC_PROP | FUNC_CONTENT

FUNC_IF -> COND_IF OPENP BOOLEAN CLOSEP OPENB FUNC_PROP CLOSEB | COND_IF OPENP BOOLEAN CLOSEP ENTER FUNC_CONTENT NEWLINE | COND_IF OPENP BOOLEAN CLOSEP FUNC_CONTENT NEWLINE
FUNC_ELIF -> FUNC_ELIF ENTER FUNC_ELIF | FUNC_ELIF FUNC_ELIF | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP OPENB FUNC_PROP CLOSEB | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP ENTER FUNC_CONTENT NEWLINE | COND_ELSE COND_IF OPENP BOOLEAN CLOSEP FUNC_CONTENT NEWLINE
FUNC_ELSE -> COND_ELSE OPENB FUNC_PROP CLOSEB | COND_ELSE ENTER FUNC_CONTENT NEWLINE | COND_ELSE FUNC_CONTENT NEWLINE

FUNC_COND -> FUNC_IF | FUNC_IF FUNC_ELSE | FUNC_IF ENTER FUNC_ELSE | FUNC_IF FUNC_ELIF | FUNC_ELSE | FUNC_IF ENTER FUNC_ELIF FUNC_ELSE | FUNC_IF FUNC_ELIF ENTER FUNC_ELSE | FUNC_IF ENTER FUNC_ELIF ENTER FUNC_ELSE


FUNC_LOOP_PROP -> SWITCH_BREAK NEWLINE | CONTINUE NEWLINE | FUNC_PROP
FUNC_FOR -> LOOP_FOR OPENP EXPRESSION CLOSEP OPENB FUNC_LOOP_PROP CLOSEB | LOOP_FOR OPENP ASSIGN_LET TEXT LOOP_IN TEXT CLOSEP OPENB FUNC_LOOP_PROP CLOSEB | LOOP_FOR OPENP ASSIGN_LET TEXT of TEXT CLOSEP OPENB FUNC_LOOP_PROP CLOSE

FUNC_WHILE -> LOOP_WHILE OPENP BOOLEAN CLOSEP OPENB FUNC_LOOP_PROP CLOSE
FUNC_DOWHILE -> LOOP_DO OPENB FUNC_LOOP_PROP CLOSEBRAC LOOP_WHILE OPENP BOOLEAN CLOSEP ENDLINE

FUNC_LOOP -> FUNC_FOR | FUNC_WHILE | FUNC_DOWHILE


FUNCTION -> FUNC_FUNCTION TEXT OPENP PARAMETER CLOSEP OPENB FUNC_PROP CLOSEB | ASSIGN_CONST TEXT EQUAL FUNC_FUNCTION OPENP PARAMETER CLOSEP OPENB FUNC_PROP CLOSEB | OPENP PARAMETER CLOSEP FUNC_LINE OPENB FUNC_PROP CLOSE

FUNC_CALL_LINE -> FUNC_CALL | FUNC_CALL NEWLINE

FUNC_CALL -> TEXT OPENP CLOSEP | TEXT OPENP VALUE CLOSEP


# Try Catch Finally
CATCH_PROP -> CATCH_PROP CATCH_PROP | S | CATCH_THROW STRING ENDLINE
TRY -> CATCH_TRY OPENB CATCH_PROP CLOSE
CATCH -> CATCH_CATCH OPENP TEXT CLOSEP OPENB CATCH_PROP CLOSE
FINALLY -> CATCH_FINALLY OPENB CATCH_PROP CLOSE

CATCHBLOCK -> TRY CATCH FINALLY | TRY CATCH | TRY FINALLY



# TERMINAL
PLUS -> plus
MINUS -> minus
MULT -> mult
POWER -> power
DIVIDE ->  divide
MODULO -> modulo

INCREMENT -> increment
DECREMENT -> decrement

EQUAL -> equal
PLUSEQUAL -> plusequal
MINEQUAL -> minequal
MULTEQUAL -> multequal
DIVEQUAL -> divequal
MODEQUAL -> modequal
POWEQUAL -> powequal
SHIFTLEFTEQUAL -> shiftleftequal
SHIFTARITHRIGHTEQUAL -> shiftarithrightequal
SHIFTLOGICRIGHTEQUAL -> shiftlogicrightequal
ANDEQUAL -> andequal
XOREQUAL -> xorequal
OREQUAL -> orequal
LOGICANDEQUAL -> logicandequal
LOGICOREQUAL -> logicorequal

COMPARE -> compare
STRICTCOMPARE -> strictcompare
NOTCOMPARE -> notcompare
STRICTNOTCOMPARE -> strictnotcompare
BIGGERTHAN -> biggerthan
SMALLERTHAN -> smallerthan
BIGGEREQUALTHAN -> biggerequalthan
SMALLEREQUALTHAN -> smallerequalthan

LOGICAND -> logicand
LOGICOR -> logicor
LOGICNOT -> logicnot

AND -> and
OR -> or
XOR -> xor
NOT -> not
SHIFTLEFT -> shiftleft
SHIFTARITHRIGHT -> shiftarithright
SHIFTLOGICRIGHT -> shiftlogicright

NUMBER -> number
STRING -> string
TEXT -> variable

TRUE -> true
FALSE -> false

NULL -> null
UNDEFINED -> undefined

APOSTHROPE -> aposthrope
QUOTE -> quote

COMMENT -> comment

ASSIGN_LET -> let
ASSIGN_VAR -> var
ASSIGN_CONST -> const

COMMA -> comma
DOT -> dot
COLON -> colon
SEMICOLON -> semicolon
OPENPAR -> openpar
CLOSEPAR -> closepar
OPENBRAC -> openbrac
CLOSEBRAC -> closebrac
QUESTION -> question
ENDLINE -> endline
NEW -> new
DELETE -> delete
BREAK -> break
CONTINUE -> continue

ARRAY_OPEN -> arrayopen
ARRAY_CLOSE -> arrayclose

COND_IF -> if
COND_ELSE -> else

SWITCH_BREAK -> break
SWITCH_SWITCH -> switch
SWITCH_CASE -> case
SWITCH_DEFAULT -> default

LOOP_FOR -> for
LOOP_WHILE -> while
LOOP_IN -> in
LOOP_DO -> do

FUNC_FUNCTION -> function
FUNC_RETURN -> return
FUNC_LINE -> funcline

CATCH_THROW -> throw
CATCH_TRY -> try
CATCH_CATCH -> catch
CATCH_FINALLY -> finally